import { Component } from '@angular/core';
import { Hero } from './hero';
import { HeroService } from './hero.service';

/**
*let是块级作用域，函数内部使用let定义后，对函数外部无影响
*
**/
@Component({
  selector: 'my-heroes',
  template: `<h1>{{title}}</h1><h2>{{selectedHero}}</h2>
    <h2>My Heroes</h2>
    <ul class="heroes">
      <li *ngFor="let hero of heroes"
        [class.selected]="hero === selectedHero"
        (click)="onSelect(hero)">
        <span class="badge">{{hero.id}}</span> {{hero.name}}
      </li>
    </ul>
    <hero-detail [hero]="selectedHero"></hero-detail>
  `,
  styles: [`
    .selected {
      background-color: #CFD8DC !important;
      color: white;
    }
    .heroes {
      margin: 0 0 2em 0;
      list-style-type: none;
      padding: 0;
      width: 15em;
    }
    .heroes li {
      cursor: pointer;
      position: relative;
      left: 0;
      background-color: #EEE;
      margin: .5em;
      padding: .3em 0;
      height: 1.6em;
      border-radius: 4px;
    }
    .heroes li.selected:hover {
      background-color: #BBD8DC !important;
      color: white;
    }
    .heroes li:hover {
      color: #607D8B;
      background-color: #DDD;
      left: .1em;
    }
    .heroes .text {
      position: relative;
      top: -3px;
    }
    .heroes .badge {
      display: inline-block;
      font-size: small;
      color: white;
      padding: 0.8em 0.7em 0 0.7em;
      background-color: #607D8B;
      line-height: 1em;
      position: relative;
      left: -1px;
      top: -4px;
      height: 1.8em;
      margin-right: .8em;
      border-radius: 4px 0 0 4px;
    }
  `],
  providers: [HeroService]//providers数组告诉 Angular，当它创建新的AppComponent组件时，也要创建一个HeroService的新实例。 //AppComponent会使用那个服务来获取英雄列表，在它组件树中的每一个子组件也同样如此。
  
})
export class HeroesComponent implements OnInit { 
name = 'Angular'; 
title = 'Tour of Heroes';


heroes: Hero[];//添加一个尚未初始化的heroes属性

//添加构造函数。构造函数自己什么也不用做，它在参数中定义了一个私有的heroService属性，并把它标记为注入HeroService的靶点。
//现在，当创建AppComponent实例时，Angular 知道需要先提供一个HeroService的实例。
constructor(private heroService: HeroService) {}
title = 'Tour of Heroes';
  selectedHero: Hero;


  getHeroes(): void {
    this.heroes = this.heroService.getHeroes();
  }

  ngOnInit(): void {
    this.getHeroes();
  }

  onSelect(hero: Hero): void {
    this.selectedHero = hero;
  }

}
